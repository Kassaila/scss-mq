@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use '../vendor/@nirazul/scss-utils/lib/function/map/assign' as *;
@use 'config';
@use 'parser/expression';

/// Set options that can be changed per call
/// @param {List} $widths - A list of viewports and their breakpoints
/// @param {string} $name - The config name
///
@mixin configure($widths, $name) {
  @if meta.type-of($widths) == 'list' {
    config.$widths: map.merge(config.$widths, ($name: $widths));
  }
}

/// Set global library options
/// @param {List} $allowed-operators - A list of allowed operators in media expressions
/// @param {Map} $media-feature-expressions - A map of media expressions
/// @param {Map} $unit-intervals - A map of unit intervals
///
@mixin configure-globally($allowed-operators, $media-feature-expressions, $unit-intervals) {
  @if meta.type-of($allowed-operators) == 'list' {
    config.$allowed-operators:
    $allowed-operators;
  }

  @if meta.type-of($media-feature-expressions) == 'map' {
    config.$media-feature-expressions:
    $media-feature-expressions;
  }

  @if meta.type-of($unit-intervals) == 'map' {
    config.$unit-intervals:
    $unit-intervals;
  }
}

/// Check a list of conditions for it's validity based on the used operator as only `<=` and `>` make sense
/// @param {List} $conditions - List of conditions, possibly nested
/// @param {string} $config-name - The utilized config's name
///
@mixin check-condition-validity($conditions, $config-name) {
  $media-feature-expressions: map.get(config.get-config($config-name), 'media-feature-expressions');

  @each $condition in $conditions {
    @if (meta.type-of($condition) == 'list') {
      @include check-condition-validity($condition, $config-name);
    } @else if expression.has-operator($condition) {
      $operator: expression.get-operator($condition);

      @if not list.index(config.$allowed-operators, $operator) {
        @error 'Operator "#{$operator}" is not allowed in condition "#{$condition}"';
      }
    }
  }
}
