@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use '../vendor/@nirazul/scss-utils/lib/function/map/assign' as *;

$unit-intervals: (
  'px': 1,
  'em': 0.01,
  'rem': 0.1,
  '': 0
) !default;

$widths: () !default;

/// Media type expressions
///
$media-type-expressions: (
  screen: 'screen',
  print: 'print',
);

/// Media feature orientation expressions
///
$media-feature-orientation-expressions: (
  portrait: '(orientation: portrait)',
  landscape: '(orientation: landscape)',
) !default;

/// Media feature resolution expressions
///
$media-feature-resolution-expressions: (
  res2x: ('(min-resolution: 2dppx)'),
  res3x: ('(min-resolution: 3dppx)'),
) !default;

/// Return a config map via name
/// @param {string} $name - The config's name
/// @return {Map} - The configuration
///
@function get-config($name) {
  @if not map.has-key($widths, $name) {
    @error 'Config "#{$name}" was not found. You must register it first.';
  }

  @return (
    'breakpoints': create-breakpoints(map.get($widths, $name)),
    'media-expressions': assign(
      $media-type-expressions,
      $media-feature-orientation-expressions,
      $media-feature-resolution-expressions,
      create-media-feature-width-expressions(map.get($widths, $name)),
    )
  );
}

/// Create a map of breakpoints with their max values as keys
/// @param {Map} $config - The input config map
/// @return {Map} - The breakpoint definitions
///
@function create-breakpoints($config) {
  $result: ();
  $boundaries: create-viewport-boundaries($config);

  @each $map-key, $map-value in $boundaries {
    $max-width-value: map.get($map-value, 'max');

    @if $max-width-value {
      $result: map.merge($result, ($map-key: $max-width-value));
    }
  }

  @return $result;
}

/// Compile a map of width expressions from a widths config list
/// @param {List} $config - The widths config list
///
@function create-media-feature-width-expressions($config) {
  $result: ();
  $boundaries: create-viewport-boundaries($config);

  @each $map-key, $map-value in $boundaries {
    $min-width-value: map.get($map-value, 'min');
    $max-width-value: map.get($map-value, 'max');
    $min-width-expr: if($min-width-value, '(min-width: #{$min-width-value})', '');
    $max-width-expr: if($max-width-value, '(max-width: #{$max-width-value})', '');
    $conjunction-expr: if($min-width-value and $max-width-value, ' and ', '');

    $result: assign($result, ($map-key: '#{$min-width-expr}#{$conjunction-expr}#{$max-width-expr}'));
  }

  @return $result;
}

/// Create a boundaries object from a config
/// @param {Map} $config - The input config map
/// @return {Map} - The resulting boundaries map
///
@function create-viewport-boundaries($config) {
  $result: ();
  $num-entries: list.length($config);

  @if ($num-entries < 3) {
    @error 'The config must have at least 3 entries (2 viewports and one breakpoint).';
  }

  @for $i from 1 through $num-entries {
    $key: list.nth($config, $i);
    $is-first: $i == 1;
    $is-last: $i == list.length($config);
    $is-string: meta.type-of($key) == 'string';

    @if (($is-first or $is-last) and not $is-string) {
      @error 'First and last entry must be a string (name of a viewport).';
    }

    @if $is-string {
      $boundaries: ();

      @if not $is-first {
        $value: list.nth($config, $i - 1);
        $boundaries: assign($boundaries, (min: $value));
      }

      @if not $is-last {
        $value: list.nth($config, $i + 1);
        $interval: map.get($unit-intervals, unit($value));
        $boundaries: assign($boundaries, (max: $value - $interval));
      }

      $result: assign($result, ($key: $boundaries));
    }
  }

  @return $result;
}
